class ElevenLabsTTS {
    constructor() {
        this.apiKey = '';
        this.voices = [];
        this.customVoices = [];
        this.allVoices = [];
        this.selectedVoice = null;
        this.selectedModel = 'eleven_turbo_v2_5'; // Default to Turbo V2.5
        this.audioBlob = null;

        this.initializeElements();
        this.bindEvents();
        this.loadSettings();
        this.updateModelInfo(); // Initialize model info display
    }

    initializeElements() {
        // API elements
        this.apiKeyInput = document.getElementById('apiKey');
        this.validateKeyBtn = document.getElementById('validateKey');
        this.keyStatus = document.getElementById('keyStatus');
        this.keySuccess = document.getElementById('keySuccess');

        // Voice elements
        this.customVoiceIdInput = document.getElementById('customVoiceId');
        this.addCustomVoiceBtn = document.getElementById('addCustomVoice');
        this.voiceSelect = document.getElementById('voiceSelect');
        this.languageFilter = document.getElementById('languageFilter');
        this.voiceSearch = document.getElementById('voiceSearch');
        this.voiceInfo = document.getElementById('voiceInfo');

        // Model elements
        this.modelSelect = document.getElementById('modelSelect');
        this.modelInfo = document.getElementById('modelInfo');

        // Settings elements
        this.speedSlider = document.getElementById('speed');
        this.stabilitySlider = document.getElementById('stability');
        this.similaritySlider = document.getElementById('similarity');
        this.styleSlider = document.getElementById('style');

        this.speedValue = document.getElementById('speedValue');
        this.stabilityValue = document.getElementById('stabilityValue');
        this.similarityValue = document.getElementById('similarityValue');
        this.styleValue = document.getElementById('styleValue');

        // Text and generation elements
        this.textInput = document.getElementById('textInput');
        this.generateBtn = document.getElementById('generateSpeech');
        this.generateError = document.getElementById('generateError');
        this.generateSuccess = document.getElementById('generateSuccess');

        // Loading and audio elements
        this.loadingSection = document.getElementById('loadingSection');
        this.audioSection = document.getElementById('audioSection');
        this.audioPlayer = document.getElementById('audioPlayer');
        this.downloadBtn = document.getElementById('downloadBtn');
    }

    bindEvents() {
        // API key validation
        this.validateKeyBtn.addEventListener('click', () => this.validateApiKey());
        this.apiKeyInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.validateApiKey();
        });

        // Custom voice ID
        this.addCustomVoiceBtn.addEventListener('click', () => this.addCustomVoice());
        this.customVoiceIdInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') this.addCustomVoice();
        });
        this.customVoiceIdInput.addEventListener('input', () => this.validateCustomVoiceInput());

        // Voice selection
        this.voiceSelect.addEventListener('change', () => this.selectVoice());
        this.languageFilter.addEventListener('change', () => this.filterVoices());
        this.voiceSearch.addEventListener('input', () => this.searchVoices());

        // Model selection
        this.modelSelect.addEventListener('change', () => this.selectModel());

        // Settings sliders
        this.speedSlider.addEventListener('input', (e) => {
            this.speedValue.textContent = parseFloat(e.target.value).toFixed(2);
            this.saveSettings();
        });

        this.stabilitySlider.addEventListener('input', (e) => {
            this.stabilityValue.textContent = parseFloat(e.target.value).toFixed(2);
            this.saveSettings();
        });

        this.similaritySlider.addEventListener('input', (e) => {
            this.similarityValue.textContent = parseFloat(e.target.value).toFixed(2);
            this.saveSettings();
        });

        this.styleSlider.addEventListener('input', (e) => {
            this.styleValue.textContent = parseFloat(e.target.value).toFixed(2);
            this.saveSettings();
        });

        // Text generation
        this.generateBtn.addEventListener('click', () => this.generateSpeech());
        this.textInput.addEventListener('input', () => this.validateInput());

        // Download
        this.downloadBtn.addEventListener('click', () => this.downloadAudio());
    }

    selectModel() {
        this.selectedModel = this.modelSelect.value;
        this.updateModelInfo();
        this.saveSettings();
    }

    updateModelInfo() {
        const modelDescriptions = {
            'eleven_turbo_v2_5': {
                title: 'üöÄ Turbo V2.5 - ƒê∆∞·ª£c khuy·∫øn ngh·ªã',
                advantages: 'T·ªëc ƒë·ªô nhanh, t·ªëi ∆∞u h√≥a ƒë·∫∑c bi·ªát cho ti·∫øng Vi·ªát',
                suitable: '·ª®ng d·ª•ng th·ªùi gian th·ª±c, chatbot, tr·ª£ l√Ω ·∫£o',
                latency: 'Th·∫•p (~300ms)',
                quality: 'Cao v·ªõi ti·∫øng Vi·ªát, r·∫•t t·ªët v·ªõi ti·∫øng Anh'
            },
            'eleven_multilingual_v2': {
                title: 'üåç Multilingual V2 - Ch·∫•t l∆∞·ª£ng cao',
                advantages: 'Ch·∫•t l∆∞·ª£ng √¢m thanh t·ªët nh·∫•t, h·ªó tr·ª£ nhi·ªÅu ng√¥n ng·ªØ',
                suitable: 'N·ªôi dung chuy√™n nghi·ªáp, podcast, audiobook',
                latency: 'Trung b√¨nh (~500ms)',
                quality: 'R·∫•t cao v·ªõi t·∫•t c·∫£ ng√¥n ng·ªØ'
            },
            'eleven_turbo_v2': {
                title: '‚ö° Turbo V2 - Nhanh',
                advantages: 'T·ªëc ƒë·ªô cao, t·ªëi ∆∞u cho ti·∫øng Anh',
                suitable: '·ª®ng d·ª•ng real-time, game, chatbot ti·∫øng Anh',
                latency: 'R·∫•t th·∫•p (~200ms)',
                quality: 'T·ªët v·ªõi ti·∫øng Anh, trung b√¨nh v·ªõi ng√¥n ng·ªØ kh√°c'
            },
            'eleven_monolingual_v1': {
                title: 'üéØ Monolingual V1 - Chuy√™n ti·∫øng Anh',
                advantages: 'Ch·∫•t l∆∞·ª£ng cao nh·∫•t cho ti·∫øng Anh',
                suitable: 'N·ªôi dung ti·∫øng Anh chuy√™n nghi·ªáp',
                latency: 'Cao (~800ms)',
                quality: 'Xu·∫•t s·∫Øc v·ªõi ti·∫øng Anh'
            },
            'eleven_multilingual_v1': {
                title: 'üìö Multilingual V1 - Phi√™n b·∫£n c≈©',
                advantages: '·ªîn ƒë·ªãnh, h·ªó tr·ª£ ƒëa ng√¥n ng·ªØ',
                suitable: 'C√°c d·ª± √°n c·∫ßn t√≠nh ·ªïn ƒë·ªãnh',
                latency: 'Cao (~1000ms)',
                quality: 'Trung b√¨nh v·ªõi t·∫•t c·∫£ ng√¥n ng·ªØ'
            }
        };

        const modelData = modelDescriptions[this.selectedModel];
        if (modelData && this.modelInfo) {
            this.modelInfo.innerHTML = `
                <div class="model-card selected">
                    <h4>${modelData.title}</h4>
                    <p><strong>∆Øu ƒëi·ªÉm:</strong> ${modelData.advantages}</p>
                    <p><strong>Ph√π h·ª£p:</strong> ${modelData.suitable}</p>
                    <p><strong>ƒê·ªô tr·ªÖ:</strong> ${modelData.latency}</p>
                    <p><strong>Ch·∫•t l∆∞·ª£ng:</strong> ${modelData.quality}</p>
                </div>
            `;
        }
    }

    validateCustomVoiceInput() {
        const voiceId = this.customVoiceIdInput.value.trim();
        this.addCustomVoiceBtn.disabled = !voiceId || !this.apiKey;
    }

    async addCustomVoice() {
        const voiceId = this.customVoiceIdInput.value.trim();

        if (!voiceId) {
            this.showError(this.keyStatus, 'Vui l√≤ng nh·∫≠p Voice ID');
            return;
        }

        if (!this.apiKey) {
            this.showError(this.keyStatus, 'Vui l√≤ng x√°c th·ª±c API key tr∆∞·ªõc');
            return;
        }

        this.addCustomVoiceBtn.disabled = true;
        this.addCustomVoiceBtn.textContent = 'ƒêang ki·ªÉm tra...';

        try {
            // Test voice ID by getting voice info
            const response = await fetch(`https://api.elevenlabs.io/v1/voices/${voiceId}`, {
                headers: {
                    'xi-api-key': this.apiKey
                }
            });

            if (response.ok) {
                const voiceData = await response.json();

                // Check if voice already exists
                const existingVoice = this.allVoices.find(v => v.voice_id === voiceId);
                if (existingVoice) {
                    this.showError(this.keyStatus, 'Gi·ªçng ƒë·ªçc n√†y ƒë√£ c√≥ trong danh s√°ch');
                    return;
                }

                // Add to custom voices
                const customVoice = {
                    ...voiceData,
                    isCustom: true,
                    labels: {
                        ...voiceData.labels,
                        language: voiceData.labels?.language || 'unknown'
                    }
                };

                this.customVoices.push(customVoice);
                this.allVoices.push(customVoice);

                this.populateVoices();
                this.showSuccess(this.keySuccess, `ƒê√£ th√™m gi·ªçng "${voiceData.name}" th√†nh c√¥ng!`);
                this.customVoiceIdInput.value = '';
                this.saveCustomVoices();

            } else {
                throw new Error('Voice ID kh√¥ng h·ª£p l·ªá ho·∫∑c kh√¥ng t·ªìn t·∫°i');
            }
        } catch (error) {
            this.showError(this.keyStatus, 'L·ªói th√™m gi·ªçng t√πy ch·ªânh: ' + error.message);
        } finally {
            this.addCustomVoiceBtn.disabled = false;
            this.addCustomVoiceBtn.textContent = 'Th√™m gi·ªçng';
        }
    }

    async validateApiKey() {
        const apiKey = this.apiKeyInput.value.trim();

        if (!apiKey) {
            this.showError(this.keyStatus, 'Vui l√≤ng nh·∫≠p API key');
            return;
        }

        this.validateKeyBtn.disabled = true;
        this.validateKeyBtn.textContent = 'ƒêang x√°c th·ª±c...';

        try {
            const response = await fetch('https://api.elevenlabs.io/v1/voices', {
                headers: {
                    'xi-api-key': apiKey
                }
            });

            if (response.ok) {
                const data = await response.json();
                this.apiKey = apiKey;
                this.voices = data.voices;

                // Combine with custom voices
                this.allVoices = [...this.voices, ...this.customVoices];

                this.hideError(this.keyStatus);
                this.showSuccess(this.keySuccess, 'API key h·ª£p l·ªá! ƒê√£ t·∫£i ' + this.allVoices.length + ' gi·ªçng ƒë·ªçc.');

                this.populateVoices();
                this.enableControls();
                this.saveApiKey();
            } else {
                throw new Error('API key kh√¥ng h·ª£p l·ªá');
            }
        } catch (error) {
            this.showError(this.keyStatus, 'L·ªói x√°c th·ª±c API key: ' + error.message);
        } finally {
            this.validateKeyBtn.disabled = false;
            this.validateKeyBtn.textContent = 'X√°c th·ª±c API Key';
        }
    }

    populateVoices() {
        // Show ALL voices, not just popular ones
        const sortedVoices = this.allVoices.sort((a, b) => {
            // Prioritize Vietnamese voices, then English, then others
            const aLang = a.labels?.language || 'unknown';
            const bLang = b.labels?.language || 'unknown';

            if (aLang === 'vi' && bLang !== 'vi') return -1;
            if (bLang === 'vi' && aLang !== 'vi') return 1;
            if (aLang === 'en' && bLang !== 'en' && bLang !== 'vi') return -1;
            if (bLang === 'en' && aLang !== 'en' && aLang !== 'vi') return 1;

            return a.name.localeCompare(b.name);
        });

        this.voiceSelect.innerHTML = '<option value="">Ch·ªçn gi·ªçng ƒë·ªçc...</option>';

        sortedVoices.forEach(voice => {
            const option = document.createElement('option');
            option.value = voice.voice_id;
            const customLabel = voice.isCustom ? ' (T√πy ch·ªânh)' : '';
            option.textContent = `${voice.name} (${this.getLanguageLabel(voice.labels?.language || 'unknown')})${customLabel}`;
            option.dataset.voice = JSON.stringify(voice);
            this.voiceSelect.appendChild(option);
        });

        // Apply current filters
        this.filterVoices();
    }

    getLanguageLabel(lang) {
        const labels = {
            'en': 'English',
            'vi': 'Ti·∫øng Vi·ªát',
            'es': 'Espa√±ol',
            'fr': 'Fran√ßais',
            'de': 'Deutsch',
            'it': 'Italiano',
            'pt': 'Portugu√™s',
            'pl': 'Polski',
            'tr': 'T√ºrk√ße',
            'ru': '–†—É—Å—Å–∫–∏–π',
            'nl': 'Nederlands',
            'cs': 'ƒåe≈°tina',
            'ar': 'ÿßŸÑÿπÿ±ÿ®Ÿäÿ©',
            'zh': '‰∏≠Êñá',
            'ja': 'Êó•Êú¨Ë™û',
            'hi': '‡§π‡§ø‡§®‡•ç‡§¶‡•Ä',
            'ko': 'ÌïúÍµ≠Ïñ¥',
            'unknown': 'Kh√¥ng x√°c ƒë·ªãnh'
        };
        return labels[lang] || lang || 'Kh√¥ng x√°c ƒë·ªãnh';
    }

    filterVoices() {
        const filter = this.languageFilter.value;
        const searchTerm = this.voiceSearch.value.toLowerCase();
        const options = this.voiceSelect.querySelectorAll('option');

        options.forEach((option, index) => {
            if (index === 0) return; // Skip first option

            const voice = JSON.parse(option.dataset.voice || '{}');
            const voiceLang = voice.labels?.language || 'unknown';
            const voiceName = voice.name.toLowerCase();

            let showByLanguage = true;
            let showBySearch = true;

            // Language filter
            if (filter === 'custom') {
                showByLanguage = voice.isCustom;
            } else if (filter !== 'all') {
                showByLanguage = voiceLang === filter;
            }

            // Search filter
            if (searchTerm) {
                showBySearch = voiceName.includes(searchTerm);
            }

            if (showByLanguage && showBySearch) {
                option.style.display = '';
            } else {
                option.style.display = 'none';
            }
        });
    }

    searchVoices() {
        this.filterVoices();
    }

    selectVoice() {
        const selectedOption = this.voiceSelect.selectedOptions[0];
        if (selectedOption && selectedOption.dataset.voice) {
            this.selectedVoice = JSON.parse(selectedOption.dataset.voice);
            this.displayVoiceInfo();
            this.validateInput();
        }
    }

    displayVoiceInfo() {
        if (!this.selectedVoice) {
            this.voiceInfo.innerHTML = '';
            return;
        }

        const voice = this.selectedVoice;
        const labels = voice.labels || {};
        const customBadge = voice.isCustom ? '<span style="background: #28a745; color: white; padding: 2px 6px; border-radius: 3px; font-size: 0.8rem; margin-left: 5px;">T√πy ch·ªânh</span>' : '';

        this.voiceInfo.innerHTML = `
            <div class="voice-card selected">
                <h4>${voice.name}${customBadge}</h4>
                <p><strong>Voice ID:</strong> <code style="background: #f8f9fa; padding: 2px 4px; border-radius: 3px;">${voice.voice_id}</code></p>
                <p><strong>Ng√¥n ng·ªØ:</strong> ${this.getLanguageLabel(labels.language)}</p>
                <p><strong>Gi·ªõi t√≠nh:</strong> ${labels.gender || 'Kh√¥ng x√°c ƒë·ªãnh'}</p>
                <p><strong>ƒê·ªô tu·ªïi:</strong> ${labels.age || 'Kh√¥ng x√°c ƒë·ªãnh'}</p>
                <p><strong>M√¥ t·∫£:</strong> ${labels.description || voice.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}</p>
                <p><strong>Ph√π h·ª£p:</strong> ${labels.use_case || 'ƒêa m·ª•c ƒë√≠ch'}</p>
                ${voice.isCustom ? '<p style="color: #28a745;"><strong>‚úì Gi·ªçng ƒë·ªçc t√πy ch·ªânh</strong></p>' : ''}
            </div>
        `;
    }

    validateInput() {
        const hasApiKey = !!this.apiKey;
        const hasVoice = !!this.selectedVoice;
        const hasText = this.textInput.value.trim().length > 0;
        const textLength = this.textInput.value.length;

        this.generateBtn.disabled = !(hasApiKey && hasVoice && hasText && textLength <= 5000);

        if (textLength > 5000) {
            this.showError(this.generateError, `VƒÉn b·∫£n qu√° d√†i (${textLength}/5000 k√Ω t·ª±)`);
        } else {
            this.hideError(this.generateError);
        }
    }

    async generateSpeech() {
        const text = this.textInput.value.trim();

        if (!text) {
            this.showError(this.generateError, 'Vui l√≤ng nh·∫≠p vƒÉn b·∫£n');
            return;
        }

        if (!this.selectedVoice) {
            this.showError(this.generateError, 'Vui l√≤ng ch·ªçn gi·ªçng ƒë·ªçc');
            return;
        }

        this.generateBtn.disabled = true;
        this.loadingSection.classList.add('show');
        this.audioSection.style.display = 'none';
        this.hideError(this.generateError);

        try {
            const response = await fetch(`https://api.elevenlabs.io/v1/text-to-speech/${this.selectedVoice.voice_id}`, {
                method: 'POST',
                headers: {
                    'Accept': 'audio/mpeg',
                    'Content-Type': 'application/json',
                    'xi-api-key': this.apiKey
                },
                body: JSON.stringify({
                    text: text,
                    model_id: this.selectedModel, // Use selected model
                    voice_settings: {
                        stability: parseFloat(this.stabilitySlider.value),
                        similarity_boost: parseFloat(this.similaritySlider.value),
                        style: parseFloat(this.styleSlider.value),
                        use_speaker_boost: true
                    }
                })
            });

            if (!response.ok) {
                const errorData = await response.json().catch(() => ({}));
                throw new Error(errorData.detail?.message || `HTTP ${response.status}: ${response.statusText}`);
            }

            this.audioBlob = await response.blob();
            this.displayAudio();
            this.showSuccess(this.generateSuccess, 'T·∫°o gi·ªçng n√≥i th√†nh c√¥ng!');

        } catch (error) {
            this.showError(this.generateError, 'L·ªói t·∫°o gi·ªçng n√≥i: ' + error.message);
        } finally {
            this.generateBtn.disabled = false;
            this.loadingSection.classList.remove('show');
        }
    }

    displayAudio() {
        if (!this.audioBlob) return;

        const audioUrl = URL.createObjectURL(this.audioBlob);
        this.audioPlayer.src = audioUrl;
        this.audioSection.style.display = 'block';

        // Scroll to audio section
        this.audioSection.scrollIntoView({ behavior: 'smooth' });
    }

    downloadAudio() {
        if (!this.audioBlob) return;

        const url = URL.createObjectURL(this.audioBlob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `elevenlabs-tts-${Date.now()}.mp3`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
    }

    enableControls() {
        this.voiceSelect.disabled = false;
        this.languageFilter.disabled = false;
        this.voiceSearch.disabled = false;
        this.customVoiceIdInput.disabled = false;
        this.validateCustomVoiceInput();
        this.validateInput();
    }

    showError(element, message) {
        element.textContent = message;
        element.classList.add('show');
    }

    hideError(element) {
        element.classList.remove('show');
    }

    showSuccess(element, message) {
        element.textContent = message;
        element.classList.add('show');
        setTimeout(() => element.classList.remove('show'), 5000);
    }

    saveSettings() {
        const settings = {
            speed: this.speedSlider.value,
            stability: this.stabilitySlider.value,
            similarity: this.similaritySlider.value,
            style: this.styleSlider.value,
            selectedModel: this.selectedModel
        };
        localStorage.setItem('elevenlabs-settings', JSON.stringify(settings));
    }

    saveCustomVoices() {
        localStorage.setItem('elevenlabs-custom-voices', JSON.stringify(this.customVoices));
    }

    loadSettings() {
        const saved = localStorage.getItem('elevenlabs-settings');
        if (saved) {
            const settings = JSON.parse(saved);

            this.speedSlider.value = settings.speed || 1.0;
            this.stabilitySlider.value = settings.stability || 0.5;
            this.similaritySlider.value = settings.similarity || 0.75;
            this.styleSlider.value = settings.style || 0.0;
            this.selectedModel = settings.selectedModel || 'eleven_turbo_v2_5';

            this.speedValue.textContent = parseFloat(this.speedSlider.value).toFixed(2);
            this.stabilityValue.textContent = parseFloat(this.stabilitySlider.value).toFixed(2);
            this.similarityValue.textContent = parseFloat(this.similaritySlider.value).toFixed(2);
            this.styleValue.textContent = parseFloat(this.styleSlider.value).toFixed(2);

            // Set model select value
            if (this.modelSelect) {
                this.modelSelect.value = this.selectedModel;
            }
        }

        // Load saved API key
        const savedApiKey = localStorage.getItem('elevenlabs-api-key');
        if (savedApiKey) {
            this.apiKeyInput.value = savedApiKey;
        }

        // Load custom voices
        const savedCustomVoices = localStorage.getItem('elevenlabs-custom-voices');
        if (savedCustomVoices) {
            this.customVoices = JSON.parse(savedCustomVoices);
        }
    }

    saveApiKey() {
        localStorage.setItem('elevenlabs-api-key', this.apiKey);
    }
}

// Initialize the application
document.addEventListener('DOMContentLoaded', () => {
    new ElevenLabsTTS();
});

// Add some utility functions for better UX
document.addEventListener('DOMContentLoaded', () => {
    // Add character counter to text input
    const textInput = document.getElementById('textInput');
    const charCounter = document.createElement('div');
    charCounter.style.cssText = 'text-align: right; margin-top: 5px; font-size: 0.9rem; color: #6c757d;';
    textInput.parentNode.appendChild(charCounter);

    textInput.addEventListener('input', () => {
        const length = textInput.value.length;
        charCounter.textContent = `${length}/5000 k√Ω t·ª±`;
        charCounter.style.color = length > 5000 ? '#dc3545' : '#6c757d';
    });

    // Initialize character counter
    charCounter.textContent = '0/5000 k√Ω t·ª±';

    // Add sample texts
    const sampleTexts = [
        "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi nhi·ªÅu c√¥ng vi·ªác kh√°c nhau.",
        "Hello! I am your AI assistant. I can help you with various tasks and answer your questions.",
        "C√¥ng ngh·ªá tr√≠ tu·ªá nh√¢n t·∫°o ƒëang ph√°t tri·ªÉn r·∫•t nhanh v√† mang l·∫°i nhi·ªÅu l·ª£i √≠ch cho cu·ªôc s·ªëng.",
        "Artificial intelligence technology is developing rapidly and bringing many benefits to our lives."
    ];

    // Add sample text buttons
    const sampleSection = document.createElement('div');
    sampleSection.style.cssText = 'margin-top: 10px;';
    sampleSection.innerHTML = '<small style="color: #6c757d;">VƒÉn b·∫£n m·∫´u:</small>';

    sampleTexts.forEach((text, index) => {
        const btn = document.createElement('button');
        btn.textContent = `M·∫´u ${index + 1}`;
        btn.style.cssText = 'margin: 5px 5px 0 0; padding: 5px 10px; border: 1px solid #dee2e6; background: white; border-radius: 5px; cursor: pointer; font-size: 0.8rem;';
        btn.addEventListener('click', () => {
            textInput.value = text;
            textInput.dispatchEvent(new Event('input'));
        });
        sampleSection.appendChild(btn);
    });

    textInput.parentNode.appendChild(sampleSection);
});